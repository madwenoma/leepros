
https://juejin.im/book/5b4bc28bf265da0f60130116/section/5b4db16de51d4519601ab69f

本小节重点：
    1.假死检测需要两方都要做，所以server对于client的心跳请求要做回应
    2.假死检测分为两步，第一步服务端做空闲检测，第二步心跳包
    3.

对于服务端来说，因为每条连接都会耗费 cpu 和内存资源，大量假死的连接会逐渐耗光服务器的资源，最终导致性能逐渐下降，程序奔溃。
对于客户端来说，连接假死会造成发送数据超时，影响用户体验。


通常，连接假死由以下几个原因造成的：
1.应用程序出现线程堵塞，无法进行数据的读写。

2.客户端或者服务端网络相关的设备出现故障，比如网卡，机房故障。

3.公网丢包。公网环境相对内网而言，非常容易出现丢包，网络抖动等现象，
如果在一段时间内用户接入的网络连续出现丢包现象，那么对客户端来说数据一直发送不出去，而服务端也是一直收不到客户端来的数据，连接就一直耗着。

如何使用IMIdleStateHandler

serverBootstrap
        .childHandler(new ChannelInitializer<NioSocketChannel>() {
            protected void initChannel(NioSocketChannel ch) {
                // 空闲检测
                ch.pipeline().addLast(new IMIdleStateHandler());
                ch.pipeline().addLast(new Spliter());
                // ...
            }
        });

要插入到最前面？是因为如果插入到最后面的话，如果这条连接读到了数据，但是在 inBound 传播的过程中出错了或者数据处理完完毕就不往后传递了（我们的应用程序属于这类），那么最终 IMIdleStateHandler 就不会读到数据，最终导致误判。


服务端在一段时间内没有收到客户端的数据，这个现象产生的原因可以分为以下两种：

1.连接假死。
2.非假死状态下确实没有发送数据。

排除第二种情况就可以，所以心跳机制的意义就凸显出来了，只是为了排除第二种情况

-------------------------
上面其实解决了服务端的空闲检测问题，服务端这个时候是能够在一定时间段之内关掉假死的连接，释放连接的资源了，
但是对于客户端来说，我们也需要检测到假死的连接。
//??

然后为了排除是否是因为服务端在非假死状态下确实没有发送数据，服务端也要定期发送心跳给客户端。

而其实在前面我们已经实现了客户端向服务端定期发送心跳，服务端这边其实只要在收到心跳之后回复客户端，给客户端发送一个心跳响应包即可。如果在一段时间之内客户端没有收到服务端发来的数据，也可以判定这条连接为假死状态。



                        // 空闲检测 放在第一
                        ch.pipeline().addLast(new IMIdleStateHandler());

                        // 心跳定时器 放在最后
                        ch.pipeline().addLast(new HeartBeatTimerHandler());



总结
我们首先讨论了连接假死相关的现象以及产生的原因。
要处理假死问题首先我们要实现客户端与服务端定期发送心跳，在这里，其实服务端只需要对客户端的定时心跳包进行回复。
客户端与服务端如果都需要检测假死，那么直接在 pipeline 的最前方插入一个自定义 IdleStateHandler，在 channelIdle() 方法里面自定义连接假死之后的逻辑。
通常空闲检测时间要比发送心跳的时间的两倍要长一些，这也是为了排除偶发的公网抖动，防止误判


学习路径：
https://juejin.im/book/5b4bc28bf265da0f60130116/section/5b4db177f265da0f9e589281